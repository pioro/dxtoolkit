name: Perl application

on: 
  push:
    tags: 
      - "v*.*.*"

jobs:
  centos7:

    runs-on: ubuntu-latest

    steps:
    - name: checkout dxtoolkit code
      uses: actions/checkout@master

    - name: Set up a Perl container
      #uses: pioro/dxtoolkit@develop
      uses: docker://pioro/dxperlcent7:5.26

    - name: Upload centos 7
      uses: actions/upload-artifact@v1
      with:
        name: cento7build
        path: dxtoolkit.tar.gz


    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1.0.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     draft: true
    #     prerelease: true

    # - name: Upload Release Asset
    #   id: upload-release-asset 
    #   uses: actions/upload-release-asset@v1.0.1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #     asset_path: /home/runner/work/dxtoolkit/dxtoolkit/dxtoolkit.tar.gz
    #     asset_name: dxtoolkit.tar.gz
    #     asset_content_type: application/tgz

  ubuntu:

    runs-on: ubuntu-18.04

    steps:
    - name: checkout dxtoolkit code
      uses: actions/checkout@master

    - name: Set up a Perl container
      run: |
        sudo apt-get update || exit 0
        sudo apt-get install -y libpar-packer-perl 
        sudo apt-get install -y libjson-pp-perl
        sudo apt-get install -y libdate-manip-perl
        sudo apt-get install -y libdatetime-format-dateparse-perl
        sudo apt-get install -y libcrypt-cbc-perl
        sudo apt-get install -y libcrypt-blowfish-perl
        sudo apt-get install -y libtext-csv-perl
        sudo apt-get install -y libtry-tiny-perl
        sudo apt-get install -y libparse-http-useragent-perl
        sudo apt-get install -y libnet-ssleay-perl
        sudo apt-get install -y libio-socket-ssl-perl
        sudo apt-get install -y libfilter-perl
        sudo apt-get install -y libterm-readkey-perl
        sudo apt-get install -y cpanminus
        sudo apt-get install -y make
        sudo apt-get install -y gcc
        sudo apt-get install -y libssl-dev
        sudo apt-get install -y libwww-perl
        sudo cpanm DateTime::Event::Cron::Quartz
        sudo cpanm Log::Syslog::Fast
        sudo cpanm Filter::Crypto::Decrypt

    - name: Compile
      run: |
          mkdir /home/runner/work/dxtoolkit/dxtoolkit/dxtoolkit2
          cd /home/runner/work/dxtoolkit/dxtoolkit/bin
          pp -u -I /home/runner/work/dxtoolkit/dxtoolkit/lib -M Text::CSV_PP -M List::MoreUtils::PP -M Crypt::Blowfish  \
          -F Crypto=dbutils\.pm$ -M Filter::Crypto::Decrypt -o /home/runner/work/dxtoolkit/dxtoolkit/dxtoolkit2/dxtoolkit `ls dx_*.pl | xargs`
          for i in dx_*.pl ; do name=${i%.pl}; ln -s /home/runner/work/dxtoolkit/dxtoolkit/dxtoolkit2/dxtoolkit /home/runner/work/dxtoolkit/dxtoolkit/dxtoolkit2/$name; done
          ls -l /home/runner/work/dxtoolkit/dxtoolkit/dxtoolkit2
          cd /home/runner/work/dxtoolkit/dxtoolkit/
          tar czvf /home/runner/work/dxtoolkit/dxtoolkit/dxtoolkit.tar.gz dxtoolkit2/

  centos6:

    runs-on: ubuntu-latest

    steps:
    - name: checkout dxtoolkit code
      uses: actions/checkout@master

    - name: Set up a Perl container
      #uses: pioro/dxtoolkit@develop
      uses: docker://pioro/dxperlcent6:5.26

    - name: Upload centos 6 
      uses: actions/upload-artifact@v1
      with:
        name: cento6build
        path: dxtoolkit.tar.gz

  Windows:

    runs-on: windows-2016

    steps:
    - name: checkout dxtoolkit code
      uses: actions/checkout@master

    - name: Get the version
      id: get_version 
      run: |
        $SOURCE_TAG = ${env:GITHUB_REF} -replace 'refs\/tags\/', ''
        $FILENAME="dxtoolkit2-" + $SOURCE_TAG + "-win.zip"
        echo "::set-env name=SOURCE_TAG::$SOURCE_TAG"
        echo "::set-env name=FILENAME::$FILENAME"
      shell: powershell

    - name: download perl
      run: |
        mkdir d:\a\perldownload
        mkdir d:\a\perl
        Invoke-WebRequest "http://strawberryperl.com/download/5.26.3.1/strawberry-perl-5.26.3.1-64bit-portable.zip" -OutFile "d:\a\perldownload\perl526.zip"
        dir d:\a\perldownload\
        Expand-Archive "d:\a\perldownload\perl526.zip" -DestinationPath "d:\a\perl"
      shell: powershell

    - name: build  
      run: s.cmd
      shell: cmd

    - name: compress toolkit
      run: |
        $NAME = "d:\a\dxtoolkit\dxtoolkit\${{ env.FILENAME }}"
        echo ${NAME}
        Compress-Archive -Path d:\a\dxtoolkit\dxtoolkit\dxtoolkit2 -DestinationPath ${NAME}
      shell: powershell

    - name: Upload windows
      uses: actions/upload-artifact@v1
      with:
        name: windowsbuild
        path: ${{ env.FILENAME }}


  release:
    runs-on: ubuntu-latest
    needs: [centos6, centos7, windows]
    steps:

    - name: Download centos7
      uses: actions/download-artifact@v1
      with:
        name: cento7build

    - name: Download centos6
      uses: actions/download-artifact@v1
      with:
        name: cento6build

    - name: Download windows
      uses: actions/download-artifact@v1
      with:
        name: windowsbuild
        

    - name: Say
      run: |
        echo "HELLO" 
        ls -l 
        ls -l windowsbuild
